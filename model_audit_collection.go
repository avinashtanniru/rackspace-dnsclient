/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the AuditCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditCollection{}

// AuditCollection struct for AuditCollection
type AuditCollection struct {
	Audits []Audit `json:"audits,omitempty"`
	Links []ZoneCollectionLinksInner `json:"links,omitempty"`
}

// NewAuditCollection instantiates a new AuditCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditCollection() *AuditCollection {
	this := AuditCollection{}
	return &this
}

// NewAuditCollectionWithDefaults instantiates a new AuditCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditCollectionWithDefaults() *AuditCollection {
	this := AuditCollection{}
	return &this
}

// GetAudits returns the Audits field value if set, zero value otherwise.
func (o *AuditCollection) GetAudits() []Audit {
	if o == nil || IsNil(o.Audits) {
		var ret []Audit
		return ret
	}
	return o.Audits
}

// GetAuditsOk returns a tuple with the Audits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditCollection) GetAuditsOk() ([]Audit, bool) {
	if o == nil || IsNil(o.Audits) {
		return nil, false
	}
	return o.Audits, true
}

// HasAudits returns a boolean if a field has been set.
func (o *AuditCollection) HasAudits() bool {
	if o != nil && !IsNil(o.Audits) {
		return true
	}

	return false
}

// SetAudits gets a reference to the given []Audit and assigns it to the Audits field.
func (o *AuditCollection) SetAudits(v []Audit) {
	o.Audits = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AuditCollection) GetLinks() []ZoneCollectionLinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []ZoneCollectionLinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditCollection) GetLinksOk() ([]ZoneCollectionLinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AuditCollection) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ZoneCollectionLinksInner and assigns it to the Links field.
func (o *AuditCollection) SetLinks(v []ZoneCollectionLinksInner) {
	o.Links = v
}

func (o AuditCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audits) {
		toSerialize["audits"] = o.Audits
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableAuditCollection struct {
	value *AuditCollection
	isSet bool
}

func (v NullableAuditCollection) Get() *AuditCollection {
	return v.value
}

func (v *NullableAuditCollection) Set(val *AuditCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditCollection(val *AuditCollection) *NullableAuditCollection {
	return &NullableAuditCollection{value: val, isSet: true}
}

func (v NullableAuditCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


