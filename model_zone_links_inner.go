/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ZoneLinksInner - struct for ZoneLinksInner
type ZoneLinksInner struct {
	ZoneRecordLink *ZoneRecordLink
	ZoneSelfLink *ZoneSelfLink
}

// ZoneRecordLinkAsZoneLinksInner is a convenience function that returns ZoneRecordLink wrapped in ZoneLinksInner
func ZoneRecordLinkAsZoneLinksInner(v *ZoneRecordLink) ZoneLinksInner {
	return ZoneLinksInner{
		ZoneRecordLink: v,
	}
}

// ZoneSelfLinkAsZoneLinksInner is a convenience function that returns ZoneSelfLink wrapped in ZoneLinksInner
func ZoneSelfLinkAsZoneLinksInner(v *ZoneSelfLink) ZoneLinksInner {
	return ZoneLinksInner{
		ZoneSelfLink: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ZoneLinksInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ZoneRecordLink
	err = newStrictDecoder(data).Decode(&dst.ZoneRecordLink)
	if err == nil {
		jsonZoneRecordLink, _ := json.Marshal(dst.ZoneRecordLink)
		if string(jsonZoneRecordLink) == "{}" { // empty struct
			dst.ZoneRecordLink = nil
		} else {
			if err = validator.Validate(dst.ZoneRecordLink); err != nil {
				dst.ZoneRecordLink = nil
			} else {
				match++
			}
		}
	} else {
		dst.ZoneRecordLink = nil
	}

	// try to unmarshal data into ZoneSelfLink
	err = newStrictDecoder(data).Decode(&dst.ZoneSelfLink)
	if err == nil {
		jsonZoneSelfLink, _ := json.Marshal(dst.ZoneSelfLink)
		if string(jsonZoneSelfLink) == "{}" { // empty struct
			dst.ZoneSelfLink = nil
		} else {
			if err = validator.Validate(dst.ZoneSelfLink); err != nil {
				dst.ZoneSelfLink = nil
			} else {
				match++
			}
		}
	} else {
		dst.ZoneSelfLink = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ZoneRecordLink = nil
		dst.ZoneSelfLink = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ZoneLinksInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ZoneLinksInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ZoneLinksInner) MarshalJSON() ([]byte, error) {
	if src.ZoneRecordLink != nil {
		return json.Marshal(&src.ZoneRecordLink)
	}

	if src.ZoneSelfLink != nil {
		return json.Marshal(&src.ZoneSelfLink)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ZoneLinksInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ZoneRecordLink != nil {
		return obj.ZoneRecordLink
	}

	if obj.ZoneSelfLink != nil {
		return obj.ZoneSelfLink
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ZoneLinksInner) GetActualInstanceValue() (interface{}) {
	if obj.ZoneRecordLink != nil {
		return *obj.ZoneRecordLink
	}

	if obj.ZoneSelfLink != nil {
		return *obj.ZoneSelfLink
	}

	// all schemas are nil
	return nil
}

type NullableZoneLinksInner struct {
	value *ZoneLinksInner
	isSet bool
}

func (v NullableZoneLinksInner) Get() *ZoneLinksInner {
	return v.value
}

func (v *NullableZoneLinksInner) Set(val *ZoneLinksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneLinksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneLinksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneLinksInner(val *ZoneLinksInner) *NullableZoneLinksInner {
	return &NullableZoneLinksInner{value: val, isSet: true}
}

func (v NullableZoneLinksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneLinksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


