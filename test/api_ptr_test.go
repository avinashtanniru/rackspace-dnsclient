/*
Cloud DNS

Testing PtrAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dnsclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_dnsclient_PtrAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PtrAPIService CreatePtrRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.PtrAPI.CreatePtrRecord(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PtrAPIService DeletePtrRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var ptrId string

		httpRes, err := apiClient.PtrAPI.DeletePtrRecord(context.Background(), tenantId, ptrId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PtrAPIService GetPtrRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var ptrId string

		resp, httpRes, err := apiClient.PtrAPI.GetPtrRecord(context.Background(), tenantId, ptrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PtrAPIService GetPtrRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.PtrAPI.GetPtrRecords(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PtrAPIService UpdatePtrRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var ptrId string

		resp, httpRes, err := apiClient.PtrAPI.UpdatePtrRecord(context.Background(), tenantId, ptrId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
