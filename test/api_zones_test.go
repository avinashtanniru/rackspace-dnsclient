/*
Cloud DNS

Testing ZonesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dnsclient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_dnsclient_ZonesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ZonesAPIService CallImport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.ZonesAPI.CallImport(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService CreateZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.ZonesAPI.CreateZone(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService Export", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var zoneId string

		resp, httpRes, err := apiClient.ZonesAPI.Export(context.Background(), tenantId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService GetZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var zoneId string

		resp, httpRes, err := apiClient.ZonesAPI.GetZone(context.Background(), tenantId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService GetZones", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string

		resp, httpRes, err := apiClient.ZonesAPI.GetZones(context.Background(), tenantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService Migrate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var zoneId string

		resp, httpRes, err := apiClient.ZonesAPI.Migrate(context.Background(), tenantId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService TenantIdZonesZoneIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var zoneId string

		httpRes, err := apiClient.ZonesAPI.TenantIdZonesZoneIdDelete(context.Background(), tenantId, zoneId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ZonesAPIService UpdateZone", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantId string
		var zoneId string

		resp, httpRes, err := apiClient.ZonesAPI.UpdateZone(context.Background(), tenantId, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
