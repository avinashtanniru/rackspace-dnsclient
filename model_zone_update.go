/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the ZoneUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneUpdate{}

// ZoneUpdate struct for ZoneUpdate
type ZoneUpdate struct {
	Email *string `json:"email,omitempty"`
	Ttl *int32 `json:"ttl,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// NewZoneUpdate instantiates a new ZoneUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneUpdate() *ZoneUpdate {
	this := ZoneUpdate{}
	return &this
}

// NewZoneUpdateWithDefaults instantiates a new ZoneUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneUpdateWithDefaults() *ZoneUpdate {
	this := ZoneUpdate{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ZoneUpdate) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneUpdate) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ZoneUpdate) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ZoneUpdate) SetEmail(v string) {
	o.Email = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ZoneUpdate) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneUpdate) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ZoneUpdate) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *ZoneUpdate) SetTtl(v int32) {
	o.Ttl = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ZoneUpdate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneUpdate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ZoneUpdate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ZoneUpdate) SetComment(v string) {
	o.Comment = &v
}

func (o ZoneUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableZoneUpdate struct {
	value *ZoneUpdate
	isSet bool
}

func (v NullableZoneUpdate) Get() *ZoneUpdate {
	return v.value
}

func (v *NullableZoneUpdate) Set(val *ZoneUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneUpdate(val *ZoneUpdate) *NullableZoneUpdate {
	return &NullableZoneUpdate{value: val, isSet: true}
}

func (v NullableZoneUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


