/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the RecordCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecordCollection{}

// RecordCollection struct for RecordCollection
type RecordCollection struct {
	Records []Record `json:"records,omitempty"`
	Links []ZoneCollectionLinksInner `json:"links,omitempty"`
}

// NewRecordCollection instantiates a new RecordCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecordCollection() *RecordCollection {
	this := RecordCollection{}
	return &this
}

// NewRecordCollectionWithDefaults instantiates a new RecordCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecordCollectionWithDefaults() *RecordCollection {
	this := RecordCollection{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *RecordCollection) GetRecords() []Record {
	if o == nil || IsNil(o.Records) {
		var ret []Record
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordCollection) GetRecordsOk() ([]Record, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *RecordCollection) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []Record and assigns it to the Records field.
func (o *RecordCollection) SetRecords(v []Record) {
	o.Records = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RecordCollection) GetLinks() []ZoneCollectionLinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []ZoneCollectionLinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecordCollection) GetLinksOk() ([]ZoneCollectionLinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RecordCollection) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ZoneCollectionLinksInner and assigns it to the Links field.
func (o *RecordCollection) SetLinks(v []ZoneCollectionLinksInner) {
	o.Links = v
}

func (o RecordCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecordCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableRecordCollection struct {
	value *RecordCollection
	isSet bool
}

func (v NullableRecordCollection) Get() *RecordCollection {
	return v.value
}

func (v *NullableRecordCollection) Set(val *RecordCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordCollection(val *RecordCollection) *NullableRecordCollection {
	return &NullableRecordCollection{value: val, isSet: true}
}

func (v NullableRecordCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


