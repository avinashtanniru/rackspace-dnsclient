/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the JobCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobCollection{}

// JobCollection struct for JobCollection
type JobCollection struct {
	Jobs []Job `json:"jobs,omitempty"`
	Links []ZoneCollectionLinksInner `json:"links,omitempty"`
}

// NewJobCollection instantiates a new JobCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobCollection() *JobCollection {
	this := JobCollection{}
	return &this
}

// NewJobCollectionWithDefaults instantiates a new JobCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobCollectionWithDefaults() *JobCollection {
	this := JobCollection{}
	return &this
}

// GetJobs returns the Jobs field value if set, zero value otherwise.
func (o *JobCollection) GetJobs() []Job {
	if o == nil || IsNil(o.Jobs) {
		var ret []Job
		return ret
	}
	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobCollection) GetJobsOk() ([]Job, bool) {
	if o == nil || IsNil(o.Jobs) {
		return nil, false
	}
	return o.Jobs, true
}

// HasJobs returns a boolean if a field has been set.
func (o *JobCollection) HasJobs() bool {
	if o != nil && !IsNil(o.Jobs) {
		return true
	}

	return false
}

// SetJobs gets a reference to the given []Job and assigns it to the Jobs field.
func (o *JobCollection) SetJobs(v []Job) {
	o.Jobs = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *JobCollection) GetLinks() []ZoneCollectionLinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []ZoneCollectionLinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobCollection) GetLinksOk() ([]ZoneCollectionLinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *JobCollection) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ZoneCollectionLinksInner and assigns it to the Links field.
func (o *JobCollection) SetLinks(v []ZoneCollectionLinksInner) {
	o.Links = v
}

func (o JobCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jobs) {
		toSerialize["jobs"] = o.Jobs
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableJobCollection struct {
	value *JobCollection
	isSet bool
}

func (v NullableJobCollection) Get() *JobCollection {
	return v.value
}

func (v *NullableJobCollection) Set(val *JobCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableJobCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableJobCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobCollection(val *JobCollection) *NullableJobCollection {
	return &NullableJobCollection{value: val, isSet: true}
}

func (v NullableJobCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


