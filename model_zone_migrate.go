/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the ZoneMigrate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneMigrate{}

// ZoneMigrate struct for ZoneMigrate
type ZoneMigrate struct {
	NewTenantId *string `json:"newTenantId,omitempty"`
}

// NewZoneMigrate instantiates a new ZoneMigrate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneMigrate() *ZoneMigrate {
	this := ZoneMigrate{}
	return &this
}

// NewZoneMigrateWithDefaults instantiates a new ZoneMigrate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneMigrateWithDefaults() *ZoneMigrate {
	this := ZoneMigrate{}
	return &this
}

// GetNewTenantId returns the NewTenantId field value if set, zero value otherwise.
func (o *ZoneMigrate) GetNewTenantId() string {
	if o == nil || IsNil(o.NewTenantId) {
		var ret string
		return ret
	}
	return *o.NewTenantId
}

// GetNewTenantIdOk returns a tuple with the NewTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneMigrate) GetNewTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.NewTenantId) {
		return nil, false
	}
	return o.NewTenantId, true
}

// HasNewTenantId returns a boolean if a field has been set.
func (o *ZoneMigrate) HasNewTenantId() bool {
	if o != nil && !IsNil(o.NewTenantId) {
		return true
	}

	return false
}

// SetNewTenantId gets a reference to the given string and assigns it to the NewTenantId field.
func (o *ZoneMigrate) SetNewTenantId(v string) {
	o.NewTenantId = &v
}

func (o ZoneMigrate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneMigrate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NewTenantId) {
		toSerialize["newTenantId"] = o.NewTenantId
	}
	return toSerialize, nil
}

type NullableZoneMigrate struct {
	value *ZoneMigrate
	isSet bool
}

func (v NullableZoneMigrate) Get() *ZoneMigrate {
	return v.value
}

func (v *NullableZoneMigrate) Set(val *ZoneMigrate) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneMigrate) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneMigrate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneMigrate(val *ZoneMigrate) *NullableZoneMigrate {
	return &NullableZoneMigrate{value: val, isSet: true}
}

func (v NullableZoneMigrate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneMigrate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


