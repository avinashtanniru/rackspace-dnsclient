/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the ZoneCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneCollection{}

// ZoneCollection struct for ZoneCollection
type ZoneCollection struct {
	Zones []Zone `json:"zones,omitempty"`
	Links []ZoneCollectionLinksInner `json:"links,omitempty"`
}

// NewZoneCollection instantiates a new ZoneCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneCollection() *ZoneCollection {
	this := ZoneCollection{}
	return &this
}

// NewZoneCollectionWithDefaults instantiates a new ZoneCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneCollectionWithDefaults() *ZoneCollection {
	this := ZoneCollection{}
	return &this
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *ZoneCollection) GetZones() []Zone {
	if o == nil || IsNil(o.Zones) {
		var ret []Zone
		return ret
	}
	return o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCollection) GetZonesOk() ([]Zone, bool) {
	if o == nil || IsNil(o.Zones) {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *ZoneCollection) HasZones() bool {
	if o != nil && !IsNil(o.Zones) {
		return true
	}

	return false
}

// SetZones gets a reference to the given []Zone and assigns it to the Zones field.
func (o *ZoneCollection) SetZones(v []Zone) {
	o.Zones = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ZoneCollection) GetLinks() []ZoneCollectionLinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []ZoneCollectionLinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCollection) GetLinksOk() ([]ZoneCollectionLinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ZoneCollection) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ZoneCollectionLinksInner and assigns it to the Links field.
func (o *ZoneCollection) SetLinks(v []ZoneCollectionLinksInner) {
	o.Links = v
}

func (o ZoneCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Zones) {
		toSerialize["zones"] = o.Zones
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableZoneCollection struct {
	value *ZoneCollection
	isSet bool
}

func (v NullableZoneCollection) Get() *ZoneCollection {
	return v.value
}

func (v *NullableZoneCollection) Set(val *ZoneCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneCollection(val *ZoneCollection) *NullableZoneCollection {
	return &NullableZoneCollection{value: val, isSet: true}
}

func (v NullableZoneCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


