/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
	"time"
)

// checks if the Zone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Zone{}

// Zone struct for Zone
type Zone struct {
	Id *string `json:"id,omitempty"`
	Fqdn *string `json:"fqdn,omitempty"`
	Email *string `json:"email,omitempty"`
	TenantId *string `json:"tenantId,omitempty"`
	SerialNumber *int32 `json:"serialNumber,omitempty"`
	Ttl *int32 `json:"ttl,omitempty"`
	MinimumTtl *int32 `json:"minimumTtl,omitempty"`
	Expiry *int32 `json:"expiry,omitempty"`
	Refresh *int32 `json:"refresh,omitempty"`
	UpdateRetry *int32 `json:"updateRetry,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	UpdatedBy *string `json:"updatedBy,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Links []ZoneSelfLink `json:"links,omitempty"`
	// Links []ZoneLinksInner `json:"links,omitempty"`
}

// NewZone instantiates a new Zone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZone() *Zone {
	this := Zone{}
	return &this
}

// NewZoneWithDefaults instantiates a new Zone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneWithDefaults() *Zone {
	this := Zone{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Zone) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Zone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Zone) SetId(v string) {
	o.Id = &v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *Zone) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *Zone) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *Zone) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *Zone) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *Zone) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *Zone) SetEmail(v string) {
	o.Email = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *Zone) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *Zone) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *Zone) SetTenantId(v string) {
	o.TenantId = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *Zone) GetSerialNumber() int32 {
	if o == nil || IsNil(o.SerialNumber) {
		var ret int32
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetSerialNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Zone) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given int32 and assigns it to the SerialNumber field.
func (o *Zone) SetSerialNumber(v int32) {
	o.SerialNumber = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *Zone) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *Zone) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *Zone) SetTtl(v int32) {
	o.Ttl = &v
}

// GetMinimumTtl returns the MinimumTtl field value if set, zero value otherwise.
func (o *Zone) GetMinimumTtl() int32 {
	if o == nil || IsNil(o.MinimumTtl) {
		var ret int32
		return ret
	}
	return *o.MinimumTtl
}

// GetMinimumTtlOk returns a tuple with the MinimumTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetMinimumTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumTtl) {
		return nil, false
	}
	return o.MinimumTtl, true
}

// HasMinimumTtl returns a boolean if a field has been set.
func (o *Zone) HasMinimumTtl() bool {
	if o != nil && !IsNil(o.MinimumTtl) {
		return true
	}

	return false
}

// SetMinimumTtl gets a reference to the given int32 and assigns it to the MinimumTtl field.
func (o *Zone) SetMinimumTtl(v int32) {
	o.MinimumTtl = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *Zone) GetExpiry() int32 {
	if o == nil || IsNil(o.Expiry) {
		var ret int32
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetExpiryOk() (*int32, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *Zone) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given int32 and assigns it to the Expiry field.
func (o *Zone) SetExpiry(v int32) {
	o.Expiry = &v
}

// GetRefresh returns the Refresh field value if set, zero value otherwise.
func (o *Zone) GetRefresh() int32 {
	if o == nil || IsNil(o.Refresh) {
		var ret int32
		return ret
	}
	return *o.Refresh
}

// GetRefreshOk returns a tuple with the Refresh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetRefreshOk() (*int32, bool) {
	if o == nil || IsNil(o.Refresh) {
		return nil, false
	}
	return o.Refresh, true
}

// HasRefresh returns a boolean if a field has been set.
func (o *Zone) HasRefresh() bool {
	if o != nil && !IsNil(o.Refresh) {
		return true
	}

	return false
}

// SetRefresh gets a reference to the given int32 and assigns it to the Refresh field.
func (o *Zone) SetRefresh(v int32) {
	o.Refresh = &v
}

// GetUpdateRetry returns the UpdateRetry field value if set, zero value otherwise.
func (o *Zone) GetUpdateRetry() int32 {
	if o == nil || IsNil(o.UpdateRetry) {
		var ret int32
		return ret
	}
	return *o.UpdateRetry
}

// GetUpdateRetryOk returns a tuple with the UpdateRetry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetUpdateRetryOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdateRetry) {
		return nil, false
	}
	return o.UpdateRetry, true
}

// HasUpdateRetry returns a boolean if a field has been set.
func (o *Zone) HasUpdateRetry() bool {
	if o != nil && !IsNil(o.UpdateRetry) {
		return true
	}

	return false
}

// SetUpdateRetry gets a reference to the given int32 and assigns it to the UpdateRetry field.
func (o *Zone) SetUpdateRetry(v int32) {
	o.UpdateRetry = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Zone) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Zone) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Zone) SetCreated(v time.Time) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Zone) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Zone) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Zone) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *Zone) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *Zone) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *Zone) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Zone) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Zone) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *Zone) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Zone) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Zone) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Zone) SetComment(v string) {
	o.Comment = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Zone) GetLinks() []ZoneSelfLink {
	if o == nil || IsNil(o.Links) {
		var ret []ZoneSelfLink
		return ret
	}
	return o.Links
}
// func (o *Zone) GetLinks() []ZoneLinksInner {
// 	if o == nil || IsNil(o.Links) {
// 		var ret []ZoneLinksInner
// 		return ret
// 	}
// 	return o.Links
// }

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetLinksOk() ([]ZoneSelfLink, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}
// func (o *Zone) GetLinksOk() ([]ZoneLinksInner, bool) {
// 	if o == nil || IsNil(o.Links) {
// 		return nil, false
// 	}
// 	return o.Links, true
// }

// HasLinks returns a boolean if a field has been set.
func (o *Zone) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []ZoneLinksInner and assigns it to the Links field.
func (o *Zone) SetLinks(v []ZoneSelfLink) {
	o.Links = v
}
// func (o *Zone) SetLinks(v []ZoneLinksInner) {
// 	o.Links = v
// }

func (o Zone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Zone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serialNumber"] = o.SerialNumber
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.MinimumTtl) {
		toSerialize["minimumTtl"] = o.MinimumTtl
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if !IsNil(o.Refresh) {
		toSerialize["refresh"] = o.Refresh
	}
	if !IsNil(o.UpdateRetry) {
		toSerialize["updateRetry"] = o.UpdateRetry
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	return toSerialize, nil
}

type NullableZone struct {
	value *Zone
	isSet bool
}

func (v NullableZone) Get() *Zone {
	return v.value
}

func (v *NullableZone) Set(val *Zone) {
	v.value = val
	v.isSet = true
}

func (v NullableZone) IsSet() bool {
	return v.isSet
}

func (v *NullableZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZone(val *Zone) *NullableZone {
	return &NullableZone{value: val, isSet: true}
}

func (v NullableZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


