/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the ZoneCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneCreate{}

// ZoneCreate struct for ZoneCreate
type ZoneCreate struct {
	Fqdn *string `json:"fqdn,omitempty"`
	Email *string `json:"email,omitempty"`
	Ttl *int32 `json:"ttl,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// NewZoneCreate instantiates a new ZoneCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneCreate() *ZoneCreate {
	this := ZoneCreate{}
	return &this
}

// NewZoneCreateWithDefaults instantiates a new ZoneCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneCreateWithDefaults() *ZoneCreate {
	this := ZoneCreate{}
	return &this
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *ZoneCreate) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCreate) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *ZoneCreate) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *ZoneCreate) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ZoneCreate) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCreate) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ZoneCreate) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ZoneCreate) SetEmail(v string) {
	o.Email = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *ZoneCreate) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCreate) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *ZoneCreate) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *ZoneCreate) SetTtl(v int32) {
	o.Ttl = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ZoneCreate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneCreate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ZoneCreate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ZoneCreate) SetComment(v string) {
	o.Comment = &v
}

func (o ZoneCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableZoneCreate struct {
	value *ZoneCreate
	isSet bool
}

func (v NullableZoneCreate) Get() *ZoneCreate {
	return v.value
}

func (v *NullableZoneCreate) Set(val *ZoneCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneCreate(val *ZoneCreate) *NullableZoneCreate {
	return &NullableZoneCreate{value: val, isSet: true}
}

func (v NullableZoneCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


