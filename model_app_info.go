/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
	"time"
)

// checks if the AppInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppInfo{}

// AppInfo struct for AppInfo
type AppInfo struct {
	ApiName *string `json:"apiName,omitempty"`
	ApiVersion *string `json:"apiVersion,omitempty"`
	ContractVersions []string `json:"contractVersions,omitempty"`
	Branch *string `json:"branch,omitempty"`
	Commit *string `json:"commit,omitempty"`
	DeployDate *time.Time `json:"deployDate,omitempty"`
}

// NewAppInfo instantiates a new AppInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppInfo() *AppInfo {
	this := AppInfo{}
	return &this
}

// NewAppInfoWithDefaults instantiates a new AppInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppInfoWithDefaults() *AppInfo {
	this := AppInfo{}
	return &this
}

// GetApiName returns the ApiName field value if set, zero value otherwise.
func (o *AppInfo) GetApiName() string {
	if o == nil || IsNil(o.ApiName) {
		var ret string
		return ret
	}
	return *o.ApiName
}

// GetApiNameOk returns a tuple with the ApiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfo) GetApiNameOk() (*string, bool) {
	if o == nil || IsNil(o.ApiName) {
		return nil, false
	}
	return o.ApiName, true
}

// HasApiName returns a boolean if a field has been set.
func (o *AppInfo) HasApiName() bool {
	if o != nil && !IsNil(o.ApiName) {
		return true
	}

	return false
}

// SetApiName gets a reference to the given string and assigns it to the ApiName field.
func (o *AppInfo) SetApiName(v string) {
	o.ApiName = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *AppInfo) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfo) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *AppInfo) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *AppInfo) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetContractVersions returns the ContractVersions field value if set, zero value otherwise.
func (o *AppInfo) GetContractVersions() []string {
	if o == nil || IsNil(o.ContractVersions) {
		var ret []string
		return ret
	}
	return o.ContractVersions
}

// GetContractVersionsOk returns a tuple with the ContractVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfo) GetContractVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ContractVersions) {
		return nil, false
	}
	return o.ContractVersions, true
}

// HasContractVersions returns a boolean if a field has been set.
func (o *AppInfo) HasContractVersions() bool {
	if o != nil && !IsNil(o.ContractVersions) {
		return true
	}

	return false
}

// SetContractVersions gets a reference to the given []string and assigns it to the ContractVersions field.
func (o *AppInfo) SetContractVersions(v []string) {
	o.ContractVersions = v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *AppInfo) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfo) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *AppInfo) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *AppInfo) SetBranch(v string) {
	o.Branch = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *AppInfo) GetCommit() string {
	if o == nil || IsNil(o.Commit) {
		var ret string
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfo) GetCommitOk() (*string, bool) {
	if o == nil || IsNil(o.Commit) {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *AppInfo) HasCommit() bool {
	if o != nil && !IsNil(o.Commit) {
		return true
	}

	return false
}

// SetCommit gets a reference to the given string and assigns it to the Commit field.
func (o *AppInfo) SetCommit(v string) {
	o.Commit = &v
}

// GetDeployDate returns the DeployDate field value if set, zero value otherwise.
func (o *AppInfo) GetDeployDate() time.Time {
	if o == nil || IsNil(o.DeployDate) {
		var ret time.Time
		return ret
	}
	return *o.DeployDate
}

// GetDeployDateOk returns a tuple with the DeployDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppInfo) GetDeployDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeployDate) {
		return nil, false
	}
	return o.DeployDate, true
}

// HasDeployDate returns a boolean if a field has been set.
func (o *AppInfo) HasDeployDate() bool {
	if o != nil && !IsNil(o.DeployDate) {
		return true
	}

	return false
}

// SetDeployDate gets a reference to the given time.Time and assigns it to the DeployDate field.
func (o *AppInfo) SetDeployDate(v time.Time) {
	o.DeployDate = &v
}

func (o AppInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiName) {
		toSerialize["apiName"] = o.ApiName
	}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.ContractVersions) {
		toSerialize["contractVersions"] = o.ContractVersions
	}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Commit) {
		toSerialize["commit"] = o.Commit
	}
	if !IsNil(o.DeployDate) {
		toSerialize["deployDate"] = o.DeployDate
	}
	return toSerialize, nil
}

type NullableAppInfo struct {
	value *AppInfo
	isSet bool
}

func (v NullableAppInfo) Get() *AppInfo {
	return v.value
}

func (v *NullableAppInfo) Set(val *AppInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAppInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAppInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppInfo(val *AppInfo) *NullableAppInfo {
	return &NullableAppInfo{value: val, isSet: true}
}

func (v NullableAppInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


