/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
)

// checks if the PtrUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PtrUpdate{}

// PtrUpdate struct for PtrUpdate
type PtrUpdate struct {
	Fqdn *string `json:"fqdn,omitempty"`
	Ttl *int32 `json:"ttl,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// NewPtrUpdate instantiates a new PtrUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPtrUpdate() *PtrUpdate {
	this := PtrUpdate{}
	return &this
}

// NewPtrUpdateWithDefaults instantiates a new PtrUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPtrUpdateWithDefaults() *PtrUpdate {
	this := PtrUpdate{}
	return &this
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *PtrUpdate) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PtrUpdate) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *PtrUpdate) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *PtrUpdate) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *PtrUpdate) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PtrUpdate) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *PtrUpdate) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *PtrUpdate) SetTtl(v int32) {
	o.Ttl = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *PtrUpdate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PtrUpdate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *PtrUpdate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *PtrUpdate) SetComment(v string) {
	o.Comment = &v
}

func (o PtrUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PtrUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullablePtrUpdate struct {
	value *PtrUpdate
	isSet bool
}

func (v NullablePtrUpdate) Get() *PtrUpdate {
	return v.value
}

func (v *NullablePtrUpdate) Set(val *PtrUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullablePtrUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullablePtrUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePtrUpdate(val *PtrUpdate) *NullablePtrUpdate {
	return &NullablePtrUpdate{value: val, isSet: true}
}

func (v NullablePtrUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePtrUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


