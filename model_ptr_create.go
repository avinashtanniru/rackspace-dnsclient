/*
Cloud DNS

This is the Rackspace Cloud DNS v2 contract.

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PtrCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PtrCreate{}

// PtrCreate struct for PtrCreate
type PtrCreate struct {
	Fqdn string `json:"fqdn"`
	IpAddress string `json:"ipAddress"`
	Ttl *int32 `json:"ttl,omitempty"`
	Comment *string `json:"comment,omitempty"`
	CloudUrl *string `json:"cloudUrl,omitempty"`
	ServiceName *string `json:"serviceName,omitempty"`
}

type _PtrCreate PtrCreate

// NewPtrCreate instantiates a new PtrCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPtrCreate(fqdn string, ipAddress string) *PtrCreate {
	this := PtrCreate{}
	this.Fqdn = fqdn
	this.IpAddress = ipAddress
	return &this
}

// NewPtrCreateWithDefaults instantiates a new PtrCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPtrCreateWithDefaults() *PtrCreate {
	this := PtrCreate{}
	return &this
}

// GetFqdn returns the Fqdn field value
func (o *PtrCreate) GetFqdn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value
// and a boolean to check if the value has been set.
func (o *PtrCreate) GetFqdnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fqdn, true
}

// SetFqdn sets field value
func (o *PtrCreate) SetFqdn(v string) {
	o.Fqdn = v
}

// GetIpAddress returns the IpAddress field value
func (o *PtrCreate) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *PtrCreate) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *PtrCreate) SetIpAddress(v string) {
	o.IpAddress = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *PtrCreate) GetTtl() int32 {
	if o == nil || IsNil(o.Ttl) {
		var ret int32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PtrCreate) GetTtlOk() (*int32, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *PtrCreate) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given int32 and assigns it to the Ttl field.
func (o *PtrCreate) SetTtl(v int32) {
	o.Ttl = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *PtrCreate) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PtrCreate) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *PtrCreate) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *PtrCreate) SetComment(v string) {
	o.Comment = &v
}

// GetCloudUrl returns the CloudUrl field value if set, zero value otherwise.
func (o *PtrCreate) GetCloudUrl() string {
	if o == nil || IsNil(o.CloudUrl) {
		var ret string
		return ret
	}
	return *o.CloudUrl
}

// GetCloudUrlOk returns a tuple with the CloudUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PtrCreate) GetCloudUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CloudUrl) {
		return nil, false
	}
	return o.CloudUrl, true
}

// HasCloudUrl returns a boolean if a field has been set.
func (o *PtrCreate) HasCloudUrl() bool {
	if o != nil && !IsNil(o.CloudUrl) {
		return true
	}

	return false
}

// SetCloudUrl gets a reference to the given string and assigns it to the CloudUrl field.
func (o *PtrCreate) SetCloudUrl(v string) {
	o.CloudUrl = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *PtrCreate) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PtrCreate) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *PtrCreate) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *PtrCreate) SetServiceName(v string) {
	o.ServiceName = &v
}

func (o PtrCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PtrCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fqdn"] = o.Fqdn
	toSerialize["ipAddress"] = o.IpAddress
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.CloudUrl) {
		toSerialize["cloudUrl"] = o.CloudUrl
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	return toSerialize, nil
}

func (o *PtrCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fqdn",
		"ipAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPtrCreate := _PtrCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPtrCreate)

	if err != nil {
		return err
	}

	*o = PtrCreate(varPtrCreate)

	return err
}

type NullablePtrCreate struct {
	value *PtrCreate
	isSet bool
}

func (v NullablePtrCreate) Get() *PtrCreate {
	return v.value
}

func (v *NullablePtrCreate) Set(val *PtrCreate) {
	v.value = val
	v.isSet = true
}

func (v NullablePtrCreate) IsSet() bool {
	return v.isSet
}

func (v *NullablePtrCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePtrCreate(val *PtrCreate) *NullablePtrCreate {
	return &NullablePtrCreate{value: val, isSet: true}
}

func (v NullablePtrCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePtrCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


